{
  "schemaVersion": "2.2",
  "description": "Install and configure AWS CloudWatch Agent on Amazon Linux 2",
  "parameters": {
    "parameterStoreConfig": {
      "type": "String",
      "description": "Parameter Store name containing CloudWatch Agent configuration",
      "default": "AmazonCloudWatch-linux/basic",
      "allowedValues": [
        "AmazonCloudWatch-linux/basic",
        "AmazonCloudWatch-linux/mongo",
        "AmazonCloudWatch-linux/gitlab"
      ]
    },
    "installOnly": {
      "type": "String",
      "description": "Install only without configuration",
      "default": "false",
      "allowedValues": [
        "true",
        "false"
      ]
    },
    "createSampleConfigs": {
      "type": "String",
      "description": "Create sample configurations in Parameter Store",
      "default": "false",
      "allowedValues": [
        "true",
        "false"
      ]
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "CreateScripts",
      "inputs": {
        "runCommand": [
          "#!/bin/bash",
          "# Create the install script",
          "cat > /tmp/install-cloudwatch-agent.sh << 'INSTALL_SCRIPT_EOF'",
          "#!/bin/bash",
          "set -euo pipefail",
          "",
          "# Configuration",
          "LOG_FILE=\"/var/log/cloudwatch-agent-install.log\"",
          "",
          "# Colors for output",
          "RED='\\033[0;31m'",
          "GREEN='\\033[0;32m'",
          "YELLOW='\\033[1;33m'",
          "BLUE='\\033[0;34m'",
          "NC='\\033[0m'",
          "",
          "# Logging function",
          "log() {",
          "    echo -e \"${1}\" | tee -a \"${LOG_FILE}\"",
          "}",
          "",
          "# Error handling",
          "error_exit() {",
          "    log \"${RED}ERROR: ${1}${NC}\"",
          "    exit 1",
          "}",
          "",
          "# Success message",
          "success() {",
          "    log \"${GREEN}SUCCESS: ${1}${NC}\"",
          "}",
          "",
          "# Info message",
          "info() {",
          "    log \"${BLUE}INFO: ${1}${NC}\"",
          "}",
          "",
          "# Check if running on Amazon Linux 2",
          "check_os() {",
          "    if [[ ! -f /etc/system-release ]]; then",
          "        error_exit \"This script is designed for Amazon Linux 2\"",
          "    fi",
          "    ",
          "    if ! grep -q \"Amazon Linux 2\" /etc/system-release; then",
          "        error_exit \"This script is designed for Amazon Linux 2\"",
          "    fi",
          "    ",
          "    success \"Running on Amazon Linux 2\"",
          "}",
          "",
          "# Detect architecture",
          "detect_architecture() {",
          "    ARCH=$(uname -m)",
          "    case $ARCH in",
          "        x86_64)",
          "            ARCH_SUFFIX=\"amd64\"",
          "            ;;",
          "        aarch64)",
          "            ARCH_SUFFIX=\"arm64\"",
          "            ;;",
          "        *)",
          "            error_exit \"Unsupported architecture: $ARCH\"",
          "            ;;",
          "    esac",
          "    info \"Detected architecture: $ARCH ($ARCH_SUFFIX)\"",
          "}",
          "",
          "# Check if agent is already installed",
          "check_existing_installation() {",
          "    if rpm -q amazon-cloudwatch-agent > /dev/null 2>&1; then",
          "        info \"CloudWatch Agent is already installed\"",
          "        return 0",
          "    else",
          "        info \"CloudWatch Agent not found, proceeding with installation\"",
          "        return 1",
          "    fi",
          "}",
          "",
          "# Download and install CloudWatch Agent",
          "install_agent() {",
          "    info \"Downloading CloudWatch Agent...\"",
          "    ",
          "    cd /tmp",
          "    ",
          "    # Download the agent package",
          "    DOWNLOAD_URL=\"https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/${ARCH_SUFFIX}/latest/amazon-cloudwatch-agent.rpm\"",
          "    ",
          "    if wget -q --timeout=30 \"$DOWNLOAD_URL\" -O amazon-cloudwatch-agent.rpm; then",
          "        success \"CloudWatch Agent downloaded successfully\"",
          "    else",
          "        error_exit \"Failed to download CloudWatch Agent from $DOWNLOAD_URL\"",
          "    fi",
          "    ",
          "    # Install the RPM package",
          "    if yum localinstall -y amazon-cloudwatch-agent.rpm; then",
          "        success \"CloudWatch Agent installed successfully\"",
          "    else",
          "        error_exit \"Failed to install CloudWatch Agent\"",
          "    fi",
          "    ",
          "    # Clean up",
          "    rm -f amazon-cloudwatch-agent.rpm",
          "}",
          "",
          "# Configure agent service",
          "configure_service() {",
          "    info \"Configuring CloudWatch Agent service...\"",
          "    ",
          "    # Enable the service",
          "    systemctl enable amazon-cloudwatch-agent",
          "    ",
          "    # Create cloudwatch-agent user if not exists",
          "    if ! id -u cwagent > /dev/null 2>&1; then",
          "        useradd -r -s /bin/false cwagent",
          "        info \"Created cwagent user\"",
          "    fi",
          "    ",
          "    # Set proper permissions",
          "    chown -R cwagent:cwagent /opt/aws/amazon-cloudwatch-agent/",
          "    chmod 755 /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent",
          "    ",
          "    # Create configuration directory",
          "    CONFIG_DIR=\"/opt/aws/amazon-cloudwatch-agent/etc\"",
          "    if [[ ! -d \"$CONFIG_DIR\" ]]; then",
          "        mkdir -p \"$CONFIG_DIR\"",
          "        chown cwagent:cwagent \"$CONFIG_DIR\"",
          "        chmod 755 \"$CONFIG_DIR\"",
          "    fi",
          "}",
          "",
          "# Main installation function",
          "main() {",
          "    log \"${GREEN}Starting CloudWatch Agent Installation via SSM${NC}\"",
          "    log \"Timestamp: $(date)\"",
          "    log \"====================\"",
          "    ",
          "    check_os",
          "    detect_architecture",
          "    ",
          "    if ! check_existing_installation; then",
          "        install_agent",
          "    fi",
          "    ",
          "    configure_service",
          "    ",
          "    success \"CloudWatch Agent installation completed successfully!\"",
          "}",
          "",
          "# Run main function",
          "main",
          "INSTALL_SCRIPT_EOF",
          "",
          "chmod +x /tmp/install-cloudwatch-agent.sh"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "InstallCloudWatchAgent",
      "inputs": {
        "runCommand": [
          "#!/bin/bash",
          "# Execute the install script",
          "/tmp/install-cloudwatch-agent.sh"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "CreateSampleConfigurations",
      "precondition": {
        "StringEquals": [
          "{{ createSampleConfigs }}",
          "true"
        ]
      },
      "inputs": {
        "runCommand": [
          "#!/bin/bash",
          "# Create sample configurations in Parameter Store",
          "REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/[a-z]$//')",
          "",
          "# MongoDB configuration",
          "cat > /tmp/mongo-config.json << 'MONGO_CONFIG_EOF'",
          "{",
          "  \"agent\": {",
          "    \"metrics_collection_interval\": 60,",
          "    \"run_as_user\": \"cwagent\"",
          "  },",
          "  \"metrics\": {",
          "    \"namespace\": \"MongoDB\",",
          "    \"metrics_collected\": {",
          "      \"disk\": {",
          "        \"measurement\": [\"used_percent\"],",
          "        \"metrics_collection_interval\": 60,",
          "        \"resources\": [\"/\", \"/var/lib/mongo\"],",
          "        \"append_dimensions\": {",
          "          \"Group\": \"Mongo\"",
          "        }",
          "      },",
          "      \"mem\": {",
          "        \"measurement\": [\"mem_used_percent\"],",
          "        \"metrics_collection_interval\": 60",
          "      },",
          "      \"cpu\": {",
          "        \"measurement\": [\"cpu_usage_idle\", \"cpu_usage_iowait\", \"cpu_usage_user\", \"cpu_usage_system\"],",
          "        \"metrics_collection_interval\": 60,",
          "        \"totalcpu\": true",
          "      },",
          "      \"procstat\": [{",
          "        \"pattern\": \"mongod\",",
          "        \"measurement\": [\"cpu_usage\", \"memory_rss\", \"memory_vms\"],",
          "        \"append_dimensions\": {",
          "          \"Process\": \"MongoDB\"",
          "        }",
          "      }]",
          "    },",
          "    \"append_dimensions\": {",
          "      \"InstanceName\": \"${aws:Tag/Name}\",",
          "      \"Environment\": \"${aws:Tag/Environment}\"",
          "    }",
          "  }",
          "}",
          "MONGO_CONFIG_EOF",
          "",
          "# GitLab configuration",
          "cat > /tmp/gitlab-config.json << 'GITLAB_CONFIG_EOF'",
          "{",
          "  \"agent\": {",
          "    \"metrics_collection_interval\": 60,",
          "    \"run_as_user\": \"cwagent\"",
          "  },",
          "  \"metrics\": {",
          "    \"namespace\": \"GitLab\",",
          "    \"metrics_collected\": {",
          "      \"disk\": {",
          "        \"measurement\": [\"used_percent\"],",
          "        \"metrics_collection_interval\": 60,",
          "        \"resources\": [\"/\", \"/var/opt/gitlab\"],",
          "        \"append_dimensions\": {",
          "          \"Group\": \"GitLab\"",
          "        }",
          "      },",
          "      \"mem\": {",
          "        \"measurement\": [\"mem_used_percent\"],",
          "        \"metrics_collection_interval\": 60",
          "      },",
          "      \"cpu\": {",
          "        \"measurement\": [\"cpu_usage_idle\", \"cpu_usage_iowait\", \"cpu_usage_user\", \"cpu_usage_system\"],",
          "        \"metrics_collection_interval\": 60,",
          "        \"totalcpu\": true",
          "      },",
          "      \"procstat\": [",
          "        {",
          "          \"pattern\": \"gitlab\",",
          "          \"measurement\": [\"cpu_usage\", \"memory_rss\"],",
          "          \"append_dimensions\": {",
          "            \"Process\": \"GitLab\"",
          "          }",
          "        },",
          "        {",
          "          \"pattern\": \"nginx\",",
          "          \"measurement\": [\"cpu_usage\", \"memory_rss\"],",
          "          \"append_dimensions\": {",
          "            \"Process\": \"Nginx\"",
          "          }",
          "        }",
          "      ]",
          "    },",
          "    \"append_dimensions\": {",
          "      \"InstanceName\": \"${aws:Tag/Name}\",",
          "      \"Environment\": \"${aws:Tag/Environment}\"",
          "    }",
          "  }",
          "}",
          "GITLAB_CONFIG_EOF",
          "",
          "# Create parameters",
          "aws ssm put-parameter --name 'AmazonCloudWatch-linux/mongo' --type 'String' --value file:///tmp/mongo-config.json --description 'CloudWatch Agent configuration for MongoDB monitoring' --region $REGION --overwrite || true",
          "aws ssm put-parameter --name 'AmazonCloudWatch-linux/gitlab' --type 'String' --value file:///tmp/gitlab-config.json --description 'CloudWatch Agent configuration for GitLab monitoring' --region $REGION --overwrite || true",
          "",
          "echo 'Sample configurations created in Parameter Store'",
          "rm -f /tmp/mongo-config.json /tmp/gitlab-config.json"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "ConfigureCloudWatchAgent",
      "precondition": {
        "StringEquals": [
          "{{ installOnly }}",
          "false"
        ]
      },
      "inputs": {
        "runCommand": [
          "#!/bin/bash",
          "set -euo pipefail",
          "",
          "PARAMETER_NAME='{{ parameterStoreConfig }}'",
          "CONFIG_FILE='/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json'",
          "AGENT_BIN='/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent'",
          "REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/[a-z]$//')",
          "",
          "echo \"Configuring CloudWatch Agent with parameter: $PARAMETER_NAME\"",
          "",
          "# Fetch configuration from Parameter Store",
          "if aws ssm get-parameter --name \"$PARAMETER_NAME\" --region \"$REGION\" --query 'Parameter.Value' --output text > \"$CONFIG_FILE\"; then",
          "    echo \"Configuration retrieved from Parameter Store\"",
          "    chown cwagent:cwagent \"$CONFIG_FILE\"",
          "    chmod 644 \"$CONFIG_FILE\"",
          "else",
          "    echo \"ERROR: Failed to retrieve configuration from Parameter Store: $PARAMETER_NAME\"",
          "    exit 1",
          "fi",
          "",
          "# Validate JSON",
          "if ! python -m json.tool \"$CONFIG_FILE\" > /dev/null 2>&1; then",
          "    echo \"ERROR: Invalid JSON in configuration file\"",
          "    exit 1",
          "fi",
          "",
          "# Stop agent if running",
          "systemctl stop amazon-cloudwatch-agent || true",
          "",
          "# Configure the agent",
          "if sudo -u cwagent \"$AGENT_BIN\" -c file:\"$CONFIG_FILE\" -a fetch-config; then",
          "    echo \"Agent configured successfully\"",
          "else",
          "    echo \"ERROR: Failed to configure agent\"",
          "    exit 1",
          "fi",
          "",
          "# Start and enable the agent",
          "systemctl start amazon-cloudwatch-agent",
          "systemctl enable amazon-cloudwatch-agent",
          "",
          "echo \"CloudWatch Agent configured and started successfully\"",
          "",
          "# Show status",
          "systemctl status amazon-cloudwatch-agent --no-pager -l || true"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "VerifyInstallation",
      "inputs": {
        "runCommand": [
          "#!/bin/bash",
          "echo 'Verifying CloudWatch Agent installation...'",
          "",
          "# Check if agent is installed",
          "if rpm -q amazon-cloudwatch-agent; then",
          "    echo '✓ CloudWatch Agent is installed'",
          "else",
          "    echo '✗ CloudWatch Agent is not installed'",
          "    exit 1",
          "fi",
          "",
          "# Check service status",
          "if systemctl is-enabled amazon-cloudwatch-agent; then",
          "    echo '✓ CloudWatch Agent service is enabled'",
          "else",
          "    echo '✗ CloudWatch Agent service is not enabled'",
          "fi",
          "",
          "if [[ '{{ installOnly }}' == 'false' ]]; then",
          "    if systemctl is-active amazon-cloudwatch-agent; then",
          "        echo '✓ CloudWatch Agent is running'",
          "    else",
          "        echo '✗ CloudWatch Agent is not running'",
          "        exit 1",
          "    fi",
          "    ",
          "    echo ''",
          "    echo 'Configuration file contents:'",
          "    cat /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json || echo 'No configuration file found'",
          "fi",
          "",
          "echo ''",
          "echo 'Installation verification completed successfully!'"
        ]
      }
    },
    {
      "action": "aws:runShellScript",
      "name": "Cleanup",
      "inputs": {
        "runCommand": [
          "#!/bin/bash",
          "# Clean up temporary files",
          "rm -f /tmp/install-cloudwatch-agent.sh",
          "echo 'Cleanup completed'"
        ]
      }
    }
  ]
}